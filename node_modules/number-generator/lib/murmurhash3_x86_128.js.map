{"version":3,"file":"murmurhash3_x86_128.js.map","sources":["../src/utils.js","../src/fns/murmurhash3_x86_128.js"],"sourcesContent":["/**\n * Returns a multiple unsigned int32\n *\n * @private\n * @param {number} x Non linear base\n * @param {number} y Linear base\n * @return {number} Unsigned int32\n */\nexport function uMul32Getter(x, y) {\n  x = x | 0;\n  y = y | 0;\n  const nonLinear = x & 0xffff;\n  const linearBase = x >>> 16;\n\n  return (nonLinear * y + (((linearBase * y) & 0xffff) << 16)) | 0;\n}\n\n/**\n * Return an unsigned int32 from hash by position\n *\n * @private\n * @param {Uint8Array} bytes UTF8 string as array\n * @param {number} position String start position\n * @return {number} Unsigned int32\n */\nexport function uInt32Getter(bytes, position) {\n  return (\n    bytes[position++] +\n    (bytes[position++] << 8) +\n    (bytes[position++] << 16) +\n    (bytes[position++] << 24)\n  );\n}\n\n/**\n * Mix hash for x86\n *\n * @private\n * @param {number} hash Base number hash\n * @returns {number} Mixed number hash\n */\nexport function uInt32mix(hash) {\n  hash ^= hash >>> 16;\n  hash = uMul32Getter(hash, 0x85ebca6b);\n  hash ^= hash >>> 13;\n  hash = uMul32Getter(hash, 0xc2b2ae35);\n  hash ^= hash >>> 16;\n\n  return hash;\n}\n\n/**\n * Returns the int32 rotated left by the number of positions\n *\n * @private\n * @param {number} x Unsigned int32\n * @param {number} y Number representing bit positions\n * @returns {number}\n */\nexport function uInt32RotateLeft(x, y) {\n  return (x << y) | (x >>> (32 - y));\n}\n\n/**\n * Create concated and filled hash string\n *\n * @private\n * @param {number[]} hash Array containing hash parts as int, represented as tuple of 4\n * @returns {string} Concatenated and filled hash\n */\nexport function createConcatenatedHash([h1, h2, h3, h4]) {\n  const fill = \"00000000\";\n  return (\n    (fill + (h1 >>> 0).toString(16)).slice(-8) +\n    (fill + (h2 >>> 0).toString(16)).slice(-8) +\n    (fill + (h3 >>> 0).toString(16)).slice(-8) +\n    (fill + (h4 >>> 0).toString(16)).slice(-8)\n  );\n}\n\n/**\n * Throw an error if the given seed is invalid for a murmur hash algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidMurmurSeed(seed) {\n  if (seed !== undefined && seed % 1 !== 0) {\n    throw new TypeError(\"Expected seed to be an integer, float given\");\n  }\n}\n\n/**\n * Throw an error if the given seed is invalid for the alea algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidAleaSeed(seed) {\n  if (seed % 1 !== 0 || seed <= 0) {\n    throw new TypeError(\n      `Expected seed to be an unsigned integer greater or equal 1, but got \"${seed}\"`\n    );\n  }\n}\n\n/**\n * Throw an error if a given hash is not a string\n *\n * @private\n * @param {string} hash The possible empty hash value\n * @param {string} functionName A function name to enhance the error message\n */\nexport function throwInvalidStringHash(hash, functionName) {\n  if (typeof hash !== \"string\") {\n    throw new TypeError(`${functionName}(): first argument is not a string.`);\n  }\n}\n\n/**\n * Encode non regular ASCII characters in string to array of chars\n *\n * @private\n * @param {string} str Encode a string into a Uint8 array\n * @returns {Uint8Array}\n */\nfunction encode(str) {\n  const length = str.length;\n  let resPos = -1;\n\n  // The Uint8Array's length must be at least 3x the length of the string because an invalid UTF-16\n  // takes up the equivalent space of 3 UTF-8 characters to encode it properly. However, Array's\n  // have an auto expanding length and 1.5x should be just the right balance for most uses.\n  const resultArray = new Uint8Array(length * 3);\n  let i = 0;\n\n  while (i !== length) {\n    let point = str.charCodeAt(i);\n    i += 1;\n\n    if (point >= 0xd800 && point <= 0xdbff) {\n      if (i === length) {\n        resultArray[(resPos += 1)] = 0xef; // 0b11101111\n        resultArray[(resPos += 1)] = 0xbf; // 0b10111111\n        resultArray[(resPos += 1)] = 0xbd; // 0b10111101\n        break;\n      }\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      const nextCode = str.charCodeAt(i);\n\n      if (nextCode >= 0xdc00 && nextCode <= 0xdfff) {\n        point = (point - 0xd800) * 0x400 + nextCode - 0xdc00 + 0x10000;\n        i += 1;\n\n        if (point > 0xffff) {\n          // point > 65535\n          resultArray[(resPos += 1)] = (0x1e /*0b11110*/ << 3) | (point >>> 18);\n          resultArray[(resPos += 1)] =\n            (0x2 /*0b10*/ << 6) | ((point >>> 12) & 0x3f); // 0b00111111\n          resultArray[(resPos += 1)] =\n            (0x2 /*0b10*/ << 6) | ((point >>> 6) & 0x3f); // 0b00111111\n          resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | (point & 0x3f); // 0b00111111\n          continue;\n        }\n      } else {\n        resultArray[(resPos += 1)] = 0xef; // 0b11101111\n        resultArray[(resPos += 1)] = 0xbf; // 0b10111111\n        resultArray[(resPos += 1)] = 0xbd; // 0b10111101\n        continue;\n      }\n    }\n\n    if (point <= 0x007f) {\n      resultArray[(resPos += 1)] = (0x0 /*0b0*/ << 7) | point;\n    } else if (point <= 0x07ff) {\n      resultArray[(resPos += 1)] = (0x6 /*0b110*/ << 5) | (point >>> 6);\n      resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | (point & 0x3f); // 0b00111111\n    } else {\n      resultArray[(resPos += 1)] = (0xe /*0b1110*/ << 4) | (point >>> 12);\n      resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | ((point >>> 6) & 0x3f); // 0b00111111\n      resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | (point & 0x3f); // 0b00111111\n    }\n  }\n\n  return resultArray.subarray(0, resPos + 1);\n}\n\n/**\n * Convert string to array of UTF 8 bytes\n *\n * @private\n * @param {string} str String to convert\n * @returns {Uint8Array} Encoded UTF8 chars\n */\nexport function toUtf8Bytes(str) {\n  const result = new Uint8Array(str.length);\n\n  for (let i = 0; i < str.length; i += 1) {\n    const charCode = str.charCodeAt(i);\n    if (charCode < 0 || charCode > 127) {\n      return encode(str);\n    }\n    result[i] = charCode;\n  }\n\n  return result;\n}\n","/** @module number-generator/lib/murmurhash3_x86_128 */\nimport {\n  throwInvalidMurmurSeed,\n  throwInvalidStringHash,\n  uInt32mix,\n  uInt32RotateLeft,\n  uMul32Getter,\n  toUtf8Bytes,\n  createConcatenatedHash,\n} from \"../utils\";\n\n/**\n * Generate a non-cryptic 128 bit number hash for x86 with murmur3 algorithm.\n *\n * From {@link https://github.com/karanlyons/murmurHash3.js}\n * Karan Lyons, 2014\n * Refactored and extended including fixes for edge cases from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/murmurhash3_x86_128\n * @throws {TypeError} Throws an exception if hash is not a string\n * @throws {TypeError} Throws an exception if seed is a float\n * @param {string} str The base string hash to generate number\n * @param {number} [seed=0] An optional seed value\n * @return {string} Generated 128 bit hash\n */\nexport default (() => {\n  const MULTIPLIER_1 = 0x239b961b;\n  const MULTIPLIER_2 = 0xab0e9789;\n  const MULTIPLIER_3 = 0x38b34ae5;\n  const MULTIPLIER_4 = 0xa1e38b93;\n\n  const CORRECTION_1 = 0x561ccd1b;\n  const CORRECTION_2 = 0x0bcaa747;\n  const CORRECTION_3 = 0x96cd1c35;\n  const CORRECTION_4 = 0x32ac3b17;\n\n  /**\n   * Generate a non-cryptic 128 bit number hash for x86 with murmur3 algorithm.\n   *\n   * @throws {TypeError} Throws an exception if hash is not a string\n   * @throws {TypeError} Throws an exception if seed is a float\n   * @param {string} str The base string hash to generate number\n   * @param {number} [seed=0] An optional seed value\n   * @return {string} Generated 128 bit hash\n   */\n  function murmurhash3_x86_128(str, seed = 0) {\n    throwInvalidStringHash(str, \"murmurhash3_x86_128\");\n    throwInvalidMurmurSeed(seed);\n\n    const hash = toUtf8Bytes(str);\n    const remainder = hash.length % 16;\n    const bytes = hash.length - remainder;\n\n    let hashSum1 = seed;\n    let hashSum2 = seed;\n    let hashSum3 = seed;\n    let hashSum4 = seed;\n\n    let calculated1 = 0;\n    let calculated2 = 0;\n    let calculated3 = 0;\n    let calculated4 = 0;\n\n    let currentIndex = 0;\n\n    while (currentIndex < bytes) {\n      calculated1 =\n        (hash[currentIndex] & 0xff) |\n        ((hash[currentIndex + 1] & 0xff) << 8) |\n        ((hash[currentIndex + 2] & 0xff) << 16) |\n        ((hash[currentIndex + 3] & 0xff) << 24);\n      calculated2 =\n        (hash[currentIndex + 4] & 0xff) |\n        ((hash[currentIndex + 5] & 0xff) << 8) |\n        ((hash[currentIndex + 6] & 0xff) << 16) |\n        ((hash[currentIndex + 7] & 0xff) << 24);\n      calculated3 =\n        (hash[currentIndex + 8] & 0xff) |\n        ((hash[currentIndex + 9] & 0xff) << 8) |\n        ((hash[currentIndex + 10] & 0xff) << 16) |\n        ((hash[currentIndex + 11] & 0xff) << 24);\n      calculated4 =\n        (hash[currentIndex + 12] & 0xff) |\n        ((hash[currentIndex + 13] & 0xff) << 8) |\n        ((hash[currentIndex + 14] & 0xff) << 16) |\n        ((hash[currentIndex + 15] & 0xff) << 24);\n\n      calculated1 = uMul32Getter(calculated1, MULTIPLIER_1);\n      calculated1 = uInt32RotateLeft(calculated1, 15);\n      calculated1 = uMul32Getter(calculated1, MULTIPLIER_2);\n      hashSum1 ^= calculated1;\n\n      hashSum1 = uInt32RotateLeft(hashSum1, 19);\n      hashSum1 += hashSum2;\n      hashSum1 = uMul32Getter(hashSum1, 5) + CORRECTION_1;\n\n      calculated2 = uMul32Getter(calculated2, MULTIPLIER_2);\n      calculated2 = uInt32RotateLeft(calculated2, 16);\n      calculated2 = uMul32Getter(calculated2, MULTIPLIER_3);\n      hashSum2 ^= calculated2;\n\n      hashSum2 = uInt32RotateLeft(hashSum2, 17);\n      hashSum2 += hashSum3;\n      hashSum2 = uMul32Getter(hashSum2, 5) + CORRECTION_2;\n\n      calculated3 = uMul32Getter(calculated3, MULTIPLIER_3);\n      calculated3 = uInt32RotateLeft(calculated3, 17);\n      calculated3 = uMul32Getter(calculated3, MULTIPLIER_4);\n      hashSum3 ^= calculated3;\n\n      hashSum3 = uInt32RotateLeft(hashSum3, 15);\n      hashSum3 += hashSum4;\n      hashSum3 = uMul32Getter(hashSum3, 5) + CORRECTION_3;\n\n      calculated4 = uMul32Getter(calculated4, MULTIPLIER_4);\n      calculated4 = uInt32RotateLeft(calculated4, 18);\n      calculated4 = uMul32Getter(calculated4, MULTIPLIER_1);\n      hashSum4 ^= calculated4;\n\n      hashSum4 = uInt32RotateLeft(hashSum4, 13);\n      hashSum4 += hashSum1;\n      hashSum4 = uMul32Getter(hashSum4, 5) + CORRECTION_4;\n\n      currentIndex += 16;\n    }\n\n    calculated1 = 0;\n    calculated2 = 0;\n    calculated3 = 0;\n    calculated4 = 0;\n\n    switch (remainder) {\n      case 15:\n        calculated4 ^= hash[currentIndex + 14] << 16;\n      // eslint-disable-next-line no-fallthrough\n      case 14:\n        calculated4 ^= hash[currentIndex + 13] << 8;\n      // eslint-disable-next-line no-fallthrough\n      case 13:\n        calculated4 ^= hash[currentIndex + 12];\n        calculated4 = uMul32Getter(calculated4, MULTIPLIER_4);\n        calculated4 = uInt32RotateLeft(calculated4, 18);\n        calculated4 = uMul32Getter(calculated4, MULTIPLIER_1);\n        hashSum4 ^= calculated4;\n      // eslint-disable-next-line no-fallthrough\n      case 12:\n        calculated3 ^= hash[currentIndex + 11] << 24;\n      // eslint-disable-next-line no-fallthrough\n      case 11:\n        calculated3 ^= hash[currentIndex + 10] << 16;\n      // eslint-disable-next-line no-fallthrough\n      case 10:\n        calculated3 ^= hash[currentIndex + 9] << 8;\n      // eslint-disable-next-line no-fallthrough\n      case 9:\n        calculated3 ^= hash[currentIndex + 8];\n        calculated3 = uMul32Getter(calculated3, MULTIPLIER_3);\n        calculated3 = uInt32RotateLeft(calculated3, 17);\n        calculated3 = uMul32Getter(calculated3, MULTIPLIER_4);\n        hashSum3 ^= calculated3;\n      // eslint-disable-next-line no-fallthrough\n      case 8:\n        calculated2 ^= hash[currentIndex + 7] << 24;\n      // eslint-disable-next-line no-fallthrough\n      case 7:\n        calculated2 ^= hash[currentIndex + 6] << 16;\n      // eslint-disable-next-line no-fallthrough\n      case 6:\n        calculated2 ^= hash[currentIndex + 5] << 8;\n      // eslint-disable-next-line no-fallthrough\n      case 5:\n        calculated2 ^= hash[currentIndex + 4];\n        calculated2 = uMul32Getter(calculated2, MULTIPLIER_2);\n        calculated2 = uInt32RotateLeft(calculated2, 16);\n        calculated2 = uMul32Getter(calculated2, MULTIPLIER_3);\n        hashSum2 ^= calculated2;\n      // eslint-disable-next-line no-fallthrough\n      case 4:\n        calculated1 ^= hash[currentIndex + 3] << 24;\n      // eslint-disable-next-line no-fallthrough\n      case 3:\n        calculated1 ^= hash[currentIndex + 2] << 16;\n      // eslint-disable-next-line no-fallthrough\n      case 2:\n        calculated1 ^= hash[currentIndex + 1] << 8;\n      // eslint-disable-next-line no-fallthrough\n      case 1:\n        calculated1 ^= hash[currentIndex];\n        calculated1 = uMul32Getter(calculated1, MULTIPLIER_1);\n        calculated1 = uInt32RotateLeft(calculated1, 15);\n        calculated1 = uMul32Getter(calculated1, MULTIPLIER_2);\n        hashSum1 ^= calculated1;\n    }\n\n    hashSum1 ^= hash.length;\n    hashSum2 ^= hash.length;\n    hashSum3 ^= hash.length;\n    hashSum4 ^= hash.length;\n\n    hashSum1 += hashSum2;\n    hashSum1 += hashSum3;\n    hashSum1 += hashSum4;\n    hashSum2 += hashSum1;\n    hashSum3 += hashSum1;\n    hashSum4 += hashSum1;\n\n    hashSum1 = uInt32mix(hashSum1);\n    hashSum2 = uInt32mix(hashSum2);\n    hashSum3 = uInt32mix(hashSum3);\n    hashSum4 = uInt32mix(hashSum4);\n\n    hashSum1 += hashSum2;\n    hashSum1 += hashSum3;\n    hashSum1 += hashSum4;\n    hashSum2 += hashSum1;\n    hashSum3 += hashSum1;\n    hashSum4 += hashSum1;\n\n    return createConcatenatedHash([hashSum1, hashSum2, hashSum3, hashSum4]);\n  }\n\n  return murmurhash3_x86_128;\n})();\n"],"names":["uMul32Getter","x","y","uInt32mix","hash","uInt32RotateLeft","createConcatenatedHash","_ref","_ref2","_slicedToArray","h1","h2","h3","h4","fill","toString","slice","throwInvalidMurmurSeed","seed","undefined","TypeError","throwInvalidStringHash","functionName","encode","str","length","resPos","resultArray","Uint8Array","i","point","charCodeAt","nextCode","subarray","toUtf8Bytes","result","charCode","MULTIPLIER_1","MULTIPLIER_2","MULTIPLIER_3","MULTIPLIER_4","CORRECTION_1","CORRECTION_2","CORRECTION_3","CORRECTION_4","murmurhash3_x86_128","remainder","bytes","hashSum1","hashSum2","hashSum3","hashSum4","calculated1","calculated2","calculated3","calculated4","currentIndex"],"mappings":"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"}