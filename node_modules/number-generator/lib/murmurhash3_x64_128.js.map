{"version":3,"file":"murmurhash3_x64_128.js.map","sources":["../src/utils.js","../src/fns/murmurhash3_x64_128.js"],"sourcesContent":["/**\n * Returns a multiple unsigned int32\n *\n * @private\n * @param {number} x Non linear base\n * @param {number} y Linear base\n * @return {number} Unsigned int32\n */\nexport function uMul32Getter(x, y) {\n  x = x | 0;\n  y = y | 0;\n  const nonLinear = x & 0xffff;\n  const linearBase = x >>> 16;\n\n  return (nonLinear * y + (((linearBase * y) & 0xffff) << 16)) | 0;\n}\n\n/**\n * Return an unsigned int32 from hash by position\n *\n * @private\n * @param {Uint8Array} bytes UTF8 string as array\n * @param {number} position String start position\n * @return {number} Unsigned int32\n */\nexport function uInt32Getter(bytes, position) {\n  return (\n    bytes[position++] +\n    (bytes[position++] << 8) +\n    (bytes[position++] << 16) +\n    (bytes[position++] << 24)\n  );\n}\n\n/**\n * Mix hash for x86\n *\n * @private\n * @param {number} hash Base number hash\n * @returns {number} Mixed number hash\n */\nexport function uInt32mix(hash) {\n  hash ^= hash >>> 16;\n  hash = uMul32Getter(hash, 0x85ebca6b);\n  hash ^= hash >>> 13;\n  hash = uMul32Getter(hash, 0xc2b2ae35);\n  hash ^= hash >>> 16;\n\n  return hash;\n}\n\n/**\n * Returns the int32 rotated left by the number of positions\n *\n * @private\n * @param {number} x Unsigned int32\n * @param {number} y Number representing bit positions\n * @returns {number}\n */\nexport function uInt32RotateLeft(x, y) {\n  return (x << y) | (x >>> (32 - y));\n}\n\n/**\n * Create concated and filled hash string\n *\n * @private\n * @param {number[]} hash Array containing hash parts as int, represented as tuple of 4\n * @returns {string} Concatenated and filled hash\n */\nexport function createConcatenatedHash([h1, h2, h3, h4]) {\n  const fill = \"00000000\";\n  return (\n    (fill + (h1 >>> 0).toString(16)).slice(-8) +\n    (fill + (h2 >>> 0).toString(16)).slice(-8) +\n    (fill + (h3 >>> 0).toString(16)).slice(-8) +\n    (fill + (h4 >>> 0).toString(16)).slice(-8)\n  );\n}\n\n/**\n * Throw an error if the given seed is invalid for a murmur hash algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidMurmurSeed(seed) {\n  if (seed !== undefined && seed % 1 !== 0) {\n    throw new TypeError(\"Expected seed to be an integer, float given\");\n  }\n}\n\n/**\n * Throw an error if the given seed is invalid for the alea algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidAleaSeed(seed) {\n  if (seed % 1 !== 0 || seed <= 0) {\n    throw new TypeError(\n      `Expected seed to be an unsigned integer greater or equal 1, but got \"${seed}\"`\n    );\n  }\n}\n\n/**\n * Throw an error if a given hash is not a string\n *\n * @private\n * @param {string} hash The possible empty hash value\n * @param {string} functionName A function name to enhance the error message\n */\nexport function throwInvalidStringHash(hash, functionName) {\n  if (typeof hash !== \"string\") {\n    throw new TypeError(`${functionName}(): first argument is not a string.`);\n  }\n}\n\n/**\n * Encode non regular ASCII characters in string to array of chars\n *\n * @private\n * @param {string} str Encode a string into a Uint8 array\n * @returns {Uint8Array}\n */\nfunction encode(str) {\n  const length = str.length;\n  let resPos = -1;\n\n  // The Uint8Array's length must be at least 3x the length of the string because an invalid UTF-16\n  // takes up the equivalent space of 3 UTF-8 characters to encode it properly. However, Array's\n  // have an auto expanding length and 1.5x should be just the right balance for most uses.\n  const resultArray = new Uint8Array(length * 3);\n  let i = 0;\n\n  while (i !== length) {\n    let point = str.charCodeAt(i);\n    i += 1;\n\n    if (point >= 0xd800 && point <= 0xdbff) {\n      if (i === length) {\n        resultArray[(resPos += 1)] = 0xef; // 0b11101111\n        resultArray[(resPos += 1)] = 0xbf; // 0b10111111\n        resultArray[(resPos += 1)] = 0xbd; // 0b10111101\n        break;\n      }\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      const nextCode = str.charCodeAt(i);\n\n      if (nextCode >= 0xdc00 && nextCode <= 0xdfff) {\n        point = (point - 0xd800) * 0x400 + nextCode - 0xdc00 + 0x10000;\n        i += 1;\n\n        if (point > 0xffff) {\n          // point > 65535\n          resultArray[(resPos += 1)] = (0x1e /*0b11110*/ << 3) | (point >>> 18);\n          resultArray[(resPos += 1)] =\n            (0x2 /*0b10*/ << 6) | ((point >>> 12) & 0x3f); // 0b00111111\n          resultArray[(resPos += 1)] =\n            (0x2 /*0b10*/ << 6) | ((point >>> 6) & 0x3f); // 0b00111111\n          resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | (point & 0x3f); // 0b00111111\n          continue;\n        }\n      } else {\n        resultArray[(resPos += 1)] = 0xef; // 0b11101111\n        resultArray[(resPos += 1)] = 0xbf; // 0b10111111\n        resultArray[(resPos += 1)] = 0xbd; // 0b10111101\n        continue;\n      }\n    }\n\n    if (point <= 0x007f) {\n      resultArray[(resPos += 1)] = (0x0 /*0b0*/ << 7) | point;\n    } else if (point <= 0x07ff) {\n      resultArray[(resPos += 1)] = (0x6 /*0b110*/ << 5) | (point >>> 6);\n      resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | (point & 0x3f); // 0b00111111\n    } else {\n      resultArray[(resPos += 1)] = (0xe /*0b1110*/ << 4) | (point >>> 12);\n      resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | ((point >>> 6) & 0x3f); // 0b00111111\n      resultArray[(resPos += 1)] = (0x2 /*0b10*/ << 6) | (point & 0x3f); // 0b00111111\n    }\n  }\n\n  return resultArray.subarray(0, resPos + 1);\n}\n\n/**\n * Convert string to array of UTF 8 bytes\n *\n * @private\n * @param {string} str String to convert\n * @returns {Uint8Array} Encoded UTF8 chars\n */\nexport function toUtf8Bytes(str) {\n  const result = new Uint8Array(str.length);\n\n  for (let i = 0; i < str.length; i += 1) {\n    const charCode = str.charCodeAt(i);\n    if (charCode < 0 || charCode > 127) {\n      return encode(str);\n    }\n    result[i] = charCode;\n  }\n\n  return result;\n}\n","/** @module number-generator/lib/murmurhash3_x64_128 */\nimport {\n  createConcatenatedHash,\n  throwInvalidMurmurSeed,\n  throwInvalidStringHash,\n  toUtf8Bytes,\n} from \"../utils\";\n\n/**\n * Generate a non-cryptic 128 bit number hash for x64 with murmur3 algorithm.\n *\n * From {@link https://github.com/karanlyons/murmurHash3.js}\n * Karan Lyons, 2014\n * Refactored and extended including fixes for edge cases from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/murmurhash3_x86_128\n * @throws {TypeError} Throws an exception if hash is not a string\n * @throws {TypeError} Throws an exception if seed is a float\n * @param {string} str The base string hash to generate number\n * @param {number} [seed=0] An optional seed value\n * @return {string} Generated 128 bit hash\n */\nexport default (() => {\n  const MULTIPLIER_1 = [0x87c37b91, 0x114253d5];\n  const MULTIPLIER_2 = [0x4cf5ad43, 0x2745937f];\n\n  const BIT_AND_BASE = 0xffff;\n\n  /**\n   * Multiple two 64 bit int (as an array with two 32 bit int)\n   *\n   * @private\n   * @param {number[]} x 64 bit int as two 32 bit int, represented as tuple of 2\n   * @param {number[]} y 64 bit int as two 32 bit int, represented as tuple of 2\n   * @returns {number[]} Multiplied 64 bit int as two 32 bit int, represented as tuple of 2\n   */\n  function uInt64Multiply(x, y) {\n    const o = [0, 0, 0, 0];\n\n    x = [x[0] >>> 16, x[0] & BIT_AND_BASE, x[1] >>> 16, x[1] & BIT_AND_BASE];\n    y = [y[0] >>> 16, y[0] & BIT_AND_BASE, y[1] >>> 16, y[1] & BIT_AND_BASE];\n\n    o[3] += x[3] * y[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= BIT_AND_BASE;\n\n    o[2] += x[2] * y[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= BIT_AND_BASE;\n\n    o[2] += x[3] * y[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= BIT_AND_BASE;\n\n    o[1] += x[1] * y[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= BIT_AND_BASE;\n\n    o[1] += x[2] * y[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= BIT_AND_BASE;\n\n    o[1] += x[3] * y[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= BIT_AND_BASE;\n\n    o[0] += x[0] * y[3] + x[1] * y[2] + x[2] * y[1] + x[3] * y[0];\n    o[0] &= BIT_AND_BASE;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n  /**\n   * Add two 64 bit int together (as an array with two 32 bit int)\n   *\n   * @private\n   * @param {number[]} x 64 bit int as two 32 bit int, represented as tuple of 2\n   * @param {number[]} y 64 bit int as two 32 bit int, represented as tuple of 2\n   * @returns {number[]} Added 64 bit int as two 32 bit int, represented as tuple of 2\n   */\n  function uInt64Add(x, y) {\n    const o = [0, 0, 0, 0];\n\n    x = [x[0] >>> 16, x[0] & BIT_AND_BASE, x[1] >>> 16, x[1] & BIT_AND_BASE];\n    y = [y[0] >>> 16, y[0] & BIT_AND_BASE, y[1] >>> 16, y[1] & BIT_AND_BASE];\n\n    o[3] += x[3] + y[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= BIT_AND_BASE;\n\n    o[2] += x[2] + y[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= BIT_AND_BASE;\n\n    o[1] += x[1] + y[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= BIT_AND_BASE;\n\n    o[0] += x[0] + y[0];\n    o[0] &= BIT_AND_BASE;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n  /**\n   * Returns the 64 int rotated left by the number of positions\n   *\n   * @private\n   * @param {number[]} bytes 64 bit int as two 32 bit int, represented as tuple of 2\n   * @param {number} position Positions to rotate int\n   * @returns {number[]} Left rotated 64 bit int as two 32 bit int, represented as tuple of 2\n   */\n  function uInt64RotateLeft(bytes, position) {\n    position %= 64;\n\n    if (position < 32) {\n      return [\n        (bytes[0] << position) | (bytes[1] >>> (32 - position)),\n        (bytes[1] << position) | (bytes[0] >>> (32 - position)),\n      ];\n    }\n\n    position -= 32;\n    return [\n      (bytes[1] << position) | (bytes[0] >>> (32 - position)),\n      (bytes[0] << position) | (bytes[1] >>> (32 - position)),\n    ];\n  }\n\n  /**\n   * Returns the 64 int with left shift by the number of positions\n   *\n   * @private\n   * @param {number[]} bytes 64 bit int as two 32 bit int, represented as tuple of 2\n   * @param {number} position Positions to shift int\n   * @returns {number[]} Multiplied 64 bit int as two 32 bit int, represented as tuple of 2\n   */\n  function uInt64LeftShift(bytes, position) {\n    position %= 64;\n\n    if (position < 32) {\n      return [\n        (bytes[0] << position) | (bytes[1] >>> (32 - position)),\n        bytes[1] << position,\n      ];\n    }\n\n    return [bytes[1] << (position - 32), 0];\n  }\n\n  /**\n   * Returns the 64 int xor-ed together from two 64 int\n   *\n   * @private\n   * @param {number[]} x 64 bit int as two 32 bit int, represented as tuple of 2\n   * @param {number[]} y 64 bit int as two 32 bit int, represented as tuple of 2\n   * @returns {number[]} Xor-ed 64 bit int, represented as tuple of 2\n   */\n  function uInt64Xor(x, y) {\n    return [x[0] ^ y[0], x[1] ^ y[1]];\n  }\n\n  /**\n   * Mix hash for x64\n   *\n   * @private\n   * @param {number[]} hash 64 bit int as two 32 bit int, represented as tuple of 2\n   * @returns {number[]} Mixed 64 bit int as two 32 bit int, represented as tuple of 2\n   */\n  function uInt64mix(hash) {\n    hash = uInt64Xor(hash, [0, hash[0] >>> 1]);\n    hash = uInt64Multiply(hash, [0xff51afd7, 0xed558ccd]);\n    hash = uInt64Xor(hash, [0, hash[0] >>> 1]);\n    hash = uInt64Multiply(hash, [0xc4ceb9fe, 0x1a85ec53]);\n    hash = uInt64Xor(hash, [0, hash[0] >>> 1]);\n\n    return hash;\n  }\n\n  /**\n   * Generate a non-cryptic 128 bit number hash for x64 with murmur3 algorithm.\n   *\n   * @throws {TypeError} Throws an exception if hash is not a string\n   * @throws {TypeError} Throws an exception if seed is a float\n   * @param {string} str The base string hash to generate number\n   * @param {number} [seed=0] An optional seed value\n   * @return {string} Generated 128 bit hash\n   */\n  function murmurhash3_x64_128(str, seed = 0) {\n    throwInvalidStringHash(str, \"murmurhash3_x64_128\");\n    throwInvalidMurmurSeed(seed);\n\n    const hash = toUtf8Bytes(str);\n    const remainder = hash.length % 16;\n    const bytes = hash.length - remainder;\n\n    let hashSum1 = [0, seed];\n    let hashSum2 = [0, seed];\n\n    let calculated1 = [0, 0];\n    let calculated2 = [0, 0];\n\n    let currentIndex = 0;\n\n    while (currentIndex < bytes) {\n      calculated1 = [\n        (hash[currentIndex + 4] & 0xff) |\n          ((hash[currentIndex + 5] & 0xff) << 8) |\n          ((hash[currentIndex + 6] & 0xff) << 16) |\n          ((hash[currentIndex + 7] & 0xff) << 24),\n        (hash[currentIndex] & 0xff) |\n          ((hash[currentIndex + 1] & 0xff) << 8) |\n          ((hash[currentIndex + 2] & 0xff) << 16) |\n          ((hash[currentIndex + 3] & 0xff) << 24),\n      ];\n      calculated2 = [\n        (hash[currentIndex + 12] & 0xff) |\n          ((hash[currentIndex + 13] & 0xff) << 8) |\n          ((hash[currentIndex + 14] & 0xff) << 16) |\n          ((hash[currentIndex + 15] & 0xff) << 24),\n        (hash[currentIndex + 8] & 0xff) |\n          ((hash[currentIndex + 9] & 0xff) << 8) |\n          ((hash[currentIndex + 10] & 0xff) << 16) |\n          ((hash[currentIndex + 11] & 0xff) << 24),\n      ];\n\n      calculated1 = uInt64Multiply(calculated1, MULTIPLIER_1);\n      calculated1 = uInt64RotateLeft(calculated1, 31);\n      calculated1 = uInt64Multiply(calculated1, MULTIPLIER_2);\n      hashSum1 = uInt64Xor(hashSum1, calculated1);\n\n      hashSum1 = uInt64RotateLeft(hashSum1, 27);\n      hashSum1 = uInt64Add(hashSum1, hashSum2);\n      hashSum1 = uInt64Add(uInt64Multiply(hashSum1, [0, 5]), [0, 0x52dce729]);\n\n      calculated2 = uInt64Multiply(calculated2, MULTIPLIER_2);\n      calculated2 = uInt64RotateLeft(calculated2, 33);\n      calculated2 = uInt64Multiply(calculated2, MULTIPLIER_1);\n      hashSum2 = uInt64Xor(hashSum2, calculated2);\n\n      hashSum2 = uInt64RotateLeft(hashSum2, 31);\n      hashSum2 = uInt64Add(hashSum2, hashSum1);\n      hashSum2 = uInt64Add(uInt64Multiply(hashSum2, [0, 5]), [0, 0x38495ab5]);\n\n      currentIndex += 16;\n    }\n\n    calculated1 = [0, 0];\n    calculated2 = [0, 0];\n\n    switch (remainder) {\n      case 15:\n        calculated2 = uInt64Xor(\n          calculated2,\n          uInt64LeftShift([0, hash[currentIndex + 14]], 48)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 14:\n        calculated2 = uInt64Xor(\n          calculated2,\n          uInt64LeftShift([0, hash[currentIndex + 13]], 40)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 13:\n        calculated2 = uInt64Xor(\n          calculated2,\n          uInt64LeftShift([0, hash[currentIndex + 12]], 32)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 12:\n        calculated2 = uInt64Xor(\n          calculated2,\n          uInt64LeftShift([0, hash[currentIndex + 11]], 24)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 11:\n        calculated2 = uInt64Xor(\n          calculated2,\n          uInt64LeftShift([0, hash[currentIndex + 10]], 16)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 10:\n        calculated2 = uInt64Xor(\n          calculated2,\n          uInt64LeftShift([0, hash[currentIndex + 9]], 8)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 9:\n        calculated2 = uInt64Xor(calculated2, [0, hash[currentIndex + 8]]);\n        calculated2 = uInt64Multiply(calculated2, MULTIPLIER_2);\n        calculated2 = uInt64RotateLeft(calculated2, 33);\n        calculated2 = uInt64Multiply(calculated2, MULTIPLIER_1);\n        hashSum2 = uInt64Xor(hashSum2, calculated2);\n      // eslint-disable-next-line no-fallthrough\n      case 8:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 7]], 56)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 7:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 6]], 48)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 6:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 5]], 40)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 5:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 4]], 32)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 4:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 3]], 24)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 3:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 2]], 16)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 2:\n        calculated1 = uInt64Xor(\n          calculated1,\n          uInt64LeftShift([0, hash[currentIndex + 1]], 8)\n        );\n      // eslint-disable-next-line no-fallthrough\n      case 1:\n        calculated1 = uInt64Xor(calculated1, [0, hash[currentIndex]]);\n        calculated1 = uInt64Multiply(calculated1, MULTIPLIER_1);\n        calculated1 = uInt64RotateLeft(calculated1, 31);\n        calculated1 = uInt64Multiply(calculated1, MULTIPLIER_2);\n        hashSum1 = uInt64Xor(hashSum1, calculated1);\n    }\n\n    hashSum1 = uInt64Xor(hashSum1, [0, hash.length]);\n    hashSum2 = uInt64Xor(hashSum2, [0, hash.length]);\n\n    hashSum1 = uInt64Add(hashSum1, hashSum2);\n    hashSum2 = uInt64Add(hashSum2, hashSum1);\n\n    hashSum1 = uInt64mix(hashSum1);\n    hashSum2 = uInt64mix(hashSum2);\n\n    hashSum1 = uInt64Add(hashSum1, hashSum2);\n    hashSum2 = uInt64Add(hashSum2, hashSum1);\n\n    return createConcatenatedHash([\n      hashSum1[0],\n      hashSum1[1],\n      hashSum2[0],\n      hashSum2[1],\n    ]);\n  }\n\n  return murmurhash3_x64_128;\n})();\n"],"names":["createConcatenatedHash","_ref","_ref2","_slicedToArray","h1","h2","h3","h4","fill","toString","slice","throwInvalidMurmurSeed","seed","undefined","TypeError","throwInvalidStringHash","hash","functionName","encode","str","length","resPos","resultArray","Uint8Array","i","point","charCodeAt","nextCode","subarray","toUtf8Bytes","result","charCode","murmurhash3_x64_128","MULTIPLIER_1","MULTIPLIER_2","BIT_AND_BASE","uInt64Multiply","x","y","o","uInt64Add","uInt64RotateLeft","bytes","position","uInt64LeftShift","uInt64Xor","uInt64mix","remainder","hashSum1","hashSum2","calculated1","calculated2","currentIndex"],"mappings":"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"}